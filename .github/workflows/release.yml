name: Release development tools
run-name: ${{ inputs.release_name }} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      tag_name:
        required: true
        type: string
        description: "Release tag name."
      release_name:
        required: true
        type: string
        description: "Release name."
      testing_release:
        required: true
        type: boolean
        description: "Is this release is in testing purpose?"

jobs:
  stage1_init_release:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4

      - uses: actions/create-release@v1.1.4
        id: create_release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          draft: false
          prerelease: ${{ inputs.testing_release }}
          release_name: ${{ inputs.release_name }}
          tag_name: ${{ inputs.tag_name }}

  stage2_build_artifacts:
    name: Build and release ${{ matrix.library.name }} v${{ matrix.library.version }} on ${{ matrix.toolchain.name }} (${{ matrix.toolchain.os }}-${{ matrix.toolchain.os_version }} with ${{ matrix.toolchain.compiler }})

    needs: stage1_init_release

    strategy:
      fail-fast: true

      matrix:
        toolchain:
          - { name: Linux,   os: ubuntu,  os_version: 20.04, compiler: gcc-10        }
          - { name: Linux,   os: ubuntu,  os_version: 22.04, compiler: gcc-12        }
          - { name: Linux,   os: ubuntu,  os_version: 24.04, compiler: gcc-14        }

          - { name: Windows, os: windows, os_version: 2019,  compiler: msvc-2019     }
          - { name: Windows, os: windows, os_version: 2022,  compiler: msvc-2022     }
          - { name: Windows, os: windows, os_version: 2025,  compiler: msvc-2022     }

          - { name: macOS,   os: macos,   os_version: 13,    compiler: appleclang-18 }
          - { name: macOS,   os: macos,   os_version: 14,    compiler: appleclang-18 }
          - { name: macOS,   os: macos,   os_version: 15,    compiler: appleclang-18 }

        library:
          - { name: googletest, version: 1.15.2 }
          - { name: zlib,       version: 1.3.1 }
          - { name: fftw,       version: 3.3.10 }
          - { name: libdeflate, version: 1.21 }
          - { name: ffmpeg,     version: 6.1 }

    runs-on: ${{ matrix.toolchain.os }}-${{ matrix.toolchain.os_version }}
    env:
      LIBRARY_BASENAME: ${{ matrix.library.name }}-${{ matrix.library.version }}-${{ matrix.toolchain.os }}-${{ matrix.toolchain.os_version }}

    steps:
      - uses: actions/checkout@v4

      - name: Install build tools
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.toolchain.compiler }}
          vcvarsall: ${{ contains(matrix.toolchain.os, 'windows') }}
          ninja: true
          cmake: true

      - name: Install NASM (Windows)
        uses: ilammy/setup-nasm@v1.5.1
        if: ${{ contains(matrix.toolchain.os, 'windows') }}

      - name: Install base tools (Unix)
        if: ${{ !contains(matrix.toolchain.os, 'windows') }}
        run: bash ${{ matrix.toolchain.os }}/base.sh

      - name: Build ${{ matrix.library.name }} (Unix)
        if: ${{ !contains(matrix.toolchain.os, 'windows') }}
        shell: bash
        run: |
          bash ${{ matrix.toolchain.os }}/${{ matrix.library.name }}.sh "${{ matrix.library.version }}"
          mv ${{ matrix.library.name }}-install/ ${{ matrix.library.name }}/
          zip -9 -r ${{ env.LIBRARY_BASENAME }}.zip ${{ matrix.library.name }}/
          zip --test ${{ env.LIBRARY_BASENAME }}.zip

      - name: Build ${{ matrix.library.name }} (Windows)
        if: ${{ contains(matrix.toolchain.os, 'windows') }}
        shell: powershell
        run: |
          powershell .\${{ matrix.toolchain.os }}\${{ matrix.library.name }}.ps1 "${{ matrix.library.version }}"
          mv .\${{ matrix.library.name }}-install\ .\${{ matrix.library.name }}\
          Compress-Archive -CompressionLevel Optimal -Path .\${{ matrix.library.name }}\ -DestinationPath ${{ env.LIBRARY_BASENAME }}.zip

      - name: Upload ${{ matrix.library.name }} as release artifact archive
        uses: svenstaro/upload-release-action@v2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          file: ${{ env.LIBRARY_BASENAME }}.zip
          asset_name: ${{ env.LIBRARY_BASENAME }}.zip
          tag: ${{ inputs.tag_name }}
